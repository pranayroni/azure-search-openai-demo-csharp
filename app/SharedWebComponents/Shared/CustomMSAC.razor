@inject HttpClient Http

<MudGrid Justify="Justify.Center">
    <MudItem id="autocomplete" xs="12" Class="overflow-x-auto">
        <MudTooltip Text="Use the arrow keys and press Tab to autofill with an existing category. Create new categories by pressing Enter. Multiple categories are split by commas. Ex: Knipper, HR " Arrow="true" Placement="Placement.Bottom" RootClass="d-inline">
            <div style="width: 100%">
                <MudAutocomplete T="string" @bind-Value="theValue" @bind-Text="_text"
                    CoerceText SearchFunc="SearchFunc" OnKeyDown="EnterFunc"
                    Variant="Variant.Outlined" AdornmentColor="Color.Default"
                    ShowProgressIndicator="true" DebounceInterval="200" SelectValueOnTab="true"
                    Clearable Placeholder="Add Categories" SelectOnClick="false"
                    Class="overflow-x-auto" ResetValueOnEmptyText="true"/>
            </div>
        </MudTooltip>

    </MudItem>
    <MudItem id="chipset" xs="12" Class="overflow-x-auto">

            @foreach (var val in selectedValues)
            {
                <MudChip Size=Size.Small Text="@(val)"  OnClose="RemoveValue" Color="Color.Secondary" />
            }
    </MudItem>
</MudGrid>

@code {
    #nullable enable
    [Parameter]
    public IEnumerable<string>? Values { get; set; }
#nullable restore
    [Parameter]
    public EventCallback<IEnumerable<string>> ValuesChanged { get; set; }

    [Parameter]
    public string Label { get; set; }

    [Parameter, EditorRequired]
    public Func<string, Task<IEnumerable<string>>> SearchFunc { get; set; }

    private HashSet<string> selectedValues = new HashSet<string>();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (Values == null)
        {
            selectedValues.Clear();
        }
        else if (!Values.SequenceEqual(selectedValues))
        {
            selectedValues = Values.ToHashSet();
            ValuesChanged.InvokeAsync(Values);
        }
    }

    private void RefreshBinding()
    {
        Values = selectedValues.ToList();
        ValuesChanged.InvokeAsync(Values);
        _text = null;
        StateHasChanged();
    }

    private void RemoveValue(MudChip chip)
    {
        if (selectedValues.RemoveWhere(x => x == chip.Text) > 0)
            RefreshBinding();
    }

    private void AddValue(string newValue)
    {
        if (newValue != null)
        {
            if (selectedValues.Add(newValue))
                RefreshBinding();
        }
    }

    /// <summary>
    /// Note that this is required to a) clear the control after you add
    /// an item to the list, and b) to trigger the addvalue method.
    /// If MudAutoComplete's bind-Value:after worked, we could get rid
    /// of this and just clear the value after it was added.
    /// </summary>
    private string theValue
    {
        get => default(string);
        set { }
    }

    //private string _value;
    private string _text;
    private void OnTextChanged(string text)
    {
        _text = text;
    }

    private async void EnterFunc(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" && _text != string.Empty)
        {

            foreach (var t in _text.Split(','))
            {
                CallAddValue(t.Trim());
            }
            _text = null;
        }
    }

    private async void CallAddValue(string str)
    {
        var matches = await SearchFunc(str);
        if (matches != null && matches.Count() > 0 &&
            string.Equals(str, matches.First(), StringComparison.OrdinalIgnoreCase))
        {
            AddValue(matches.First());
        }
        else if (!Values.Any(s => s.Equals(str, StringComparison.OrdinalIgnoreCase)))
        {
            AddValue(str);
        }
    }

    private Task ListItemOnClickAsync(string item)
    {
        AddValue(item);
        return Task.CompletedTask;
    }
}
